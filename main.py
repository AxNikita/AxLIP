import asyncio
import logging
import re

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import CommandStart
from aiogram.types import KeyboardButton

import config
import logging_config
import sender_service

dp = Dispatcher()
logging_config.setup_logging()
logging = logging.getLogger("app")


def get_username(message):
    return message.from_user.username


@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    username = get_username(message)
    logging.info("start command = " + username)
    kb = [
        [
            KeyboardButton(text="üìñ"),
            KeyboardButton(text="üìö")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É"
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç " + username + " !", reply_markup=keyboard)


@dp.message(F.text.lower() == "üìñ")
async def cmd_get_page(message: types.Message):
    await message.answer("–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–Ω–∏–≥—É: ")


@dp.message(F.text.lower() == "üìö")
async def cmd_get_books(message: types.Message):
    await message.answer("–í–∞—à–∏ –∫–Ω–∏–≥–∏: ")


@dp.message(lambda message: re.fullmatch(r'^\d+$', message.text))
async def cmd_save_page(message: types.Message):
    username = get_username(message)
    try:
        page = int(message.text)
        logging.info("page = " + str(page))
        sender_service.send_page(page)
        await message.answer(username + " –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É!")
    except (ValueError, TypeError):
        logging.error("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Ü–∏—Ñ—Ä—É = " + username)
        await message.answer(username + " –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!")


async def main():
    bot = Bot(token=config.TG_TOKEN)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
